generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  carts         Cart[] // Relation to Cart model

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model ProductCategory {
  id          String    @id @default(ulid())
  name        String    @unique
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] // Relation to Product model

  @@map("product_category")
}

model Product {
  id                   String   @id @default(ulid())
  sku                  String   @unique
  slug                 String   @unique
  name                 String
  description          String
  price                Decimal
  imageUrl             String?
  stockQuantity        Int
  minimumOrderQuantity Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  isFeatured           Boolean  @default(false)
  isActive             Boolean  @default(true)

  // Relation to ProductCategory
  categoryId String?
  category   ProductCategory? @relation(fields: [categoryId], references: [id])

  cartItems CartItem[] // Relation to CartItem model

  @@map("product")
}

model Cart {
  id        String     @id @default(ulid())
  userId    String     @unique // Each user can only have one active cart
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[] // Relation to CartItem model

  @@map("cart")
}

model CartItem {
  id        String   @id @default(ulid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId]) // Ensures a product is only once in a given cart
  @@map("cart_item")
}
